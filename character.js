/*let colors=[23231A,322F20,6A5837,988F2A,988F2A,FE5F00];
let colors=[ECFEAA,E2DE84,A6A670,86836D,86836D, 626267]; // has greeen
let colors=[30362F,625834,A59132,FFFBDB,DA7422,]; //browns and white and orange
*/
//the stats 


/*For now ,let's focus on the backend elements and we'll do the style and the layout of the elemnts in the html pages later. So give me an implementation of the code that is going to create the character stats(name, health, lives, gains) 
where gains is an array of the things the character can collect along the journey, along with all of the other functions for managing the stats and updating them .*/

let character = {
    name: "Hero",
    health: 100,
    lives: 3,
    gains: []
};

function saveCharacterState() {
    localStorage.setItem("character", JSON.stringify(character));
}

function loadCharacterState() {
    const stored = localStorage.getItem("character");
    if (stored) {
        character = JSON.parse(stored);
    }
}

function initializeCharacter(name = "Hero") {
    character = {
        name: name,
        health: 100,
        lives: 3,
        gains: []
    };
    saveCharacterState();
}

function displayCharacter() {
    const charDiv = document.getElementById("character-display");
    charDiv.innerHTML = `
        <h3>Character Info</h3>
        <p>Name: ${character.name}</p>
        <p>Health: ${character.health}</p>
        <p>Lives: ${character.lives}</p>
        <p>Gains: ${character.gains.join(", ")}</p>
    `;
}

function updateChoices() {
    document.querySelectorAll("button").forEach(button => {
        let available = true;

        const requiredHealth = parseInt(button.dataset.health || "0");
        if (requiredHealth > 0 && character.health < requiredHealth) {
            available = false;
        }

        const requiredGain = button.dataset.gain;
        if (requiredGain && !character.gains.includes(requiredGain)) {
            available = false;
        }

        button.disabled = !available;
    });
}

function applyButtonActions(button) {
    const healthChange = parseInt(button.dataset.health || "0");
    if (healthChange !== 0) {
        character.health += healthChange;
        if (character.health > 100) character.health = 100;
        if (character.health <= 0) {
            character.lives -= 1;
            character.health = (character.lives > 0) ? 100 : 0;
        }
    }

    const lifeChange = parseInt(button.dataset.life || "0");
    if (lifeChange !== 0) {
        character.lives += lifeChange;
    }

    const gainItem = button.dataset.gain;
    if (gainItem && !character.gains.includes(gainItem)) {
        character.gains.push(gainItem);
    }

    const combatResult = button.dataset.combatResult;
    if (combatResult === "lose") {
        character.lives -= 1;
        if (character.lives < 0) character.lives = 0;
    }

    saveCharacterState();
}

function setupActionListeners() {
    document.querySelectorAll("button").forEach(button => {
        button.addEventListener("click", () => {
            applyButtonActions(button);
        });
    });
}

window.onload = () => {
    loadCharacterState();
    displayCharacter();
    updateChoices();
    setupActionListeners();
};


/* summary
 Character management: done
Conditions system: done
Dynamic choice activation: done
Debug display: done
Fully compatible with my current HTML generated by C*/
